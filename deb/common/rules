#!/usr/bin/make -f

VERSION ?= $(shell cat engine/VERSION)
TARGET_ARCH = $(shell dpkg-architecture -qDEB_TARGET_ARCH)

# force packages to be built with xz compression, as Ubuntu 21.10 and up use
# zstd compression, which is non-standard, and breaks 'dpkg-sig --verify'
override_dh_builddeb:
	dh_builddeb -- -Zxz

override_dh_auto_build:
	# Build the daemon and dependencies
	cd engine && DOCKER_GITCOMMIT=$(ENGINE_GITCOMMIT) PRODUCT=docker ./hack/make.sh dynbinary
	cd engine && TMP_GOPATH="/go" hack/dockerfile/install/install.sh tini
	cd engine && TMP_GOPATH="/go" hack/dockerfile/install/install.sh proxy dynamic

override_dh_auto_test:
	ver="$$(engine/bundles/dynbinary-daemon/dockerd --version)"; \
		test "$$ver" = "Docker version $(VERSION), build $(ENGINE_GITCOMMIT)" && echo "PASS: daemon version OK" || (echo "FAIL: daemon version ($$ver) did not match" && exit 1)

override_dh_strip:
	# Go has lots of problems with stripping, so just don't

override_dh_auto_install:
	# docker-ce install
	install -D -m 0644 /sources/docker.service debian/docker-ce/lib/systemd/system/docker.service
	install -D -m 0644 /sources/docker.socket debian/docker-ce/lib/systemd/system/docker.socket
	install -D -m 0755 $(shell readlink -e engine/bundles/dynbinary-daemon/dockerd) debian/docker-ce/usr/bin/dockerd
	install -D -m 0755 /usr/local/bin/docker-proxy debian/docker-ce/usr/bin/docker-proxy
	install -D -m 0755 /usr/local/bin/docker-init debian/docker-ce/usr/bin/docker-init

override_dh_installinit:
	# use "docker" as our service name, not "docker-ce"
	dh_installinit --name=docker

override_dh_shlibdeps:
	dh_shlibdeps --dpkg-shlibdeps-params=--ignore-missing-info

override_dh_install:
	dh_install
	# TODO Can we do this from within our container?
	dh_apparmor --profile-name=docker-ce -pdocker-ce

override_dh_gencontrol:
	dh_gencontrol --remaining-packages

%:
	dh $@ --with=bash-completion $(shell command -v dh_systemd_enable > /dev/null 2>&1 && echo --with=systemd)
